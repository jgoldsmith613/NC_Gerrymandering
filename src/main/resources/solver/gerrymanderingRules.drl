import org.optaplanner.core.api.score.buildin.simplelong.SimpleLongScoreHolder;
import com.rhc.gerrymandering.domain.Block;
import com.rhc.gerrymandering.domain.DistrictPoint;
import com.rhc.gerrymandering.domain.SumationInfo;
import com.rhc.gerrymandering.domain.DistancePair;
import com.rhc.gerrymandering.domain.ZipCodeDistances;

import accumulate com.rhc.gerrymandering.domain.PolygonCountAccumulate difference
import accumulate com.rhc.gerrymandering.app.LoadBalanceAccumulateFunction loadBalance;
import accumulate com.rhc.gerrymandering.app.VarianceAccumulateFunction variance2

global SimpleLongScoreHolder scoreHolder;

/*rule "sample hard"
when
    ZipCode(district == null)
then
    scoreHolder.addHardConstraintMatch(kcontext, -1 );
end*/

rule "distribute population"
when
     $district: Integer()
     SumationInfo($average: averagePerDistrict)
     $populationSum: Long() from accumulate(
         Block( district == $district, $population: population),
         sum($population)
     )
then
        scoreHolder.addConstraintMatch(kcontext, -10*(($populationSum-$average)*($populationSum-$average)));
end

/*rule "minimizing Latitude  and Long Varience"
when
     $district: Integer()
     accumulate(
         ZipCode( district == $district, $lat: expandedLat, $long: expandedLong),
         $latVariance: variance($lat),
         $longVariance: variance($long)
     )
then
        scoreHolder.addSoftConstraintMatch(kcontext, -($latVariance.longValue()));
        scoreHolder.addSoftConstraintMatch(kcontext, -($longVariance.longValue()));
        if($latVariance.longValue() == 0 && $longVariance.longValue() == 0){
                System.out.println($latVariance);
                System.out.println($longVariance);

                scoreHolder.addSoftConstraintMatch(kcontext, -1000000000000L);
        }

end*/

rule "minimizing Latitude Varience"
when
     $district: Integer()
     accumulate(
         Block( district == $district, $lat: expandedLat),
         $result: variance2($lat)
     )
then

       //System.out.println("district: " + $district + ", variance: " + $result + " " + kcontext);
       if($result.equals(Double.NaN) ){
              scoreHolder.addConstraintMatch(kcontext, -100000000000L);
        }else{
                scoreHolder.addConstraintMatch(kcontext, -($result.longValue()));

        }

      // scoreHolder.addConstraintMatch(kcontext, - (long) $result.getMeanDeviationSquaredSumRoot(100));



end



rule "minimizing Long Varience"
when
     $district: Integer()
     accumulate(
         Block( district == $district, $long: expandedLong),
         $result: variance2($long)
     )
then
       if($result.equals(Double.NaN)){
              scoreHolder.addConstraintMatch(kcontext, -100000000000L);
       }else{
             scoreHolder.addConstraintMatch(kcontext, -($result.longValue()));

        }

            //  scoreHolder.addConstraintMatch(kcontext, - (long) $result.getMeanDeviationSquaredSumRoot(100));


end



/*rule "inserting centroid"
when
     $district: Integer()
     accumulate(
         Block( district == $district, $lat: latitude, $long: longitude),
         $avgLat: average($lat),
         $avgLong: average($long)
        )
then
       insertLogical(new DistrictPoint($avgLat, $avgLong));

end*/


/*rule "minimizing Long Varkjkjience"
when
     $district: Integer()
     accumulate(
         Block( district == $district, $long: expandedLong ),
         $longMax: max($long)
     )
then


              if($longMax != null){

                scoreHolder.addConstraintMatch(kcontext, -1* ((Long)$longMax)  );

                }




end

rule "minimizing Long Varkjdsffdskjience"
when
     $district: Integer()
     accumulate(
         Block( district == $district, $lat: expandedLat),
         $latMin: min($lat)
     )
then

       if($latMin != null){


                scoreHolder.addConstraintMatch(kcontext, -1* ((Long) $latMin) );
        }




end*/

/*rule "temp"
when
     $district: Integer()
     accumulate(
         Block( district == $district, $polygon: polygon),
         $longVariance: difference($polygon)
     )
then
        scoreHolder.addConstraintMatch(kcontext, -($longVariance*$longVariance));


end*/

/*rule "maximize touching"
when
    Block( district != null, $district: district, $polygon: polygon, $blockId: blockId )
    exists Block( blockId != $blockId, district == $district, polygon.touches($polygon))

then
        scoreHolder.addConstraintMatch(kcontext, 100);

end*/


/*rule "distance minimizing"
when
     $district: Integer()
     $sum: Long() from accumulate(
         DistancePair(district == $district, $distance: distance),
         sum($distance)
     )
then
        scoreHolder.addSoftConstraintMatch(kcontext, -($sum*$sum));
end


rule "Insert Distance Distance"
when
     $zipCodeDistances: ZipCodeDistances()
     ZipCode( district != null, $district: district, $origin: zipCode )
     ZipCode( zipCode != $origin, $destination: zipCode, district == $district )
     not DistancePair(origin== $origin, $zipCodeDistances.getDistancePair($origin, $destination) < distance)
then
    insertLogical( new DistancePair($origin, $destination, $zipCodeDistances.getDistancePair($origin, $destination) , $district) );
end */

/*rule "Insert Distance Distance"
when
     $zipCodeDistances: ZipCodeDistances()
     ZipCode( district != null, $district: district, $origin: zipCode )
     ZipCode( zipCode != $origin, $destination: zipCode, district == $district )
then
    long value = $zipCodeDistances.getDistancePair($origin, $destination);
    scoreHolder.addSoftConstraintMatch(kcontext, -(value*value/10));
end
*/
